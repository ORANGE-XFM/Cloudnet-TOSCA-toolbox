###############################################################################
# Software Name : Cloudnet TOSCA toolbox
# Version: 1.0
# SPDX-FileCopyrightText: Copyright (c) 2021 Orange
# SPDX-License-Identifier: Apache-2.0
#
# This software is distributed under the Apache License 2.0
# the text of which is available at http://www.apache.org/licenses/LICENSE-2.0
# or see the "LICENSE-2.0.txt" file for more details.
#
# Authors:
#   Frédéric Klamm <frederic.klamm@orange.com>
#
# Software description: TOSCA profile of K8S Network CRD de-facto standard
# (https://github.com/k8snetworkplumbingwg/multi-net-spec/tree/master/)
###############################################################################

tosca_definitions_version: tosca_simple_yaml_1_3

description: Kubernetes CNI Custom Resource Definition specified by CNCF

metadata:
  template_name: k8s_cni_cncf_types
  template_author: fk
  template_version: 0.9

imports:
  - k8s_common_types.yaml

data_types:
  tosca.datatatypes.iolab.k8s.cni_cncf.NetworkAttachmentConfig:
    derived_from: tosca.datatypes.Root
    properties:
      cniVersion: 
        type: string
        required: true
      plugins: 
        description: >-
          The plugin chain to execute. 
        type: list
        entry_schema:
          type: tosca.datatatypes.iolab.k8s.cni_cncf.Plugin
        constraints:
          - min_length: 1
        required: false

  tosca.datatatypes.iolab.k8s.cni_cncf.Plugin:
    derived_from: tosca.datatypes.Root
    description: >-
      This is the base type for plugins specified by the CNCF CNI project.
    properties:
      name:
        type: string
        required: false

  tosca.datatatypes.iolab.k8s.cni_cncf.Bridge:
    derived_from: tosca.datatatypes.iolab.k8s.cni_cncf.Plugin
    description: >-
      All containers (on the same host) are plugged into a bridge (virtual switch) that resides in the host network namespace. 
      The containers receive one end of the veth pair with the other end connected to the bridge.
      An IP address is only assigned to one end of the veth pair – one residing in the container. 
      The bridge itself can also be assigned an IP address, turning it into a gateway for the containers. 
      Alternatively, the bridge can function purely in L2 mode and would need to be bridged to the host network interface
       (if other than container-to-container communication on the same host is desired).
    properties:            
      bridge:
        description: >-
          Name of the bridge to use/create. 
        type: string
        default: cni0
        required: false
      isGateway:
        description: >-
          Sets isGateway to true and makes the assigned IP the default route.
        type: boolean
        default: false
        required: false
      forceAddress:
        description: >-
          Indicates if a new IP address should be set if the previous value has been changed. 
        type: boolean
        default: false
        required: false
      ipMasq:
        description: >-
          Set up IP Masquerade on the host for traffic originating from this network and destined outside of it.
        type: boolean
        default: false
        required: false
      mtu:
        description: >-
          Explicitly set MTU to the specified value. Defaults to the value chosen by the kernel.
        type: integer
        required: false
      hairpinMode:
        description: >-
          set hairpin mode for interfaces on the bridge.
        type: boolean
        default: false
        required: false
      ipam:
        description: >-
          IPAM configuration to be used for this network. For L2-only network, create empty dictionary.
        type: map
        required: true
        default: { }
      promiscMode:
        description: >-
          Set promiscuous mode on the bridge. 
        type: boolean
        default: false
        required: false
      vlan:
        description: >
          Assign VLAN tag.
          It configures the VLAN tag on the host end of the veth and also enables the vlan_filtering feature on the bridge interface.
        type: integer
        required: false

  tosca.datatatypes.iolab.k8s.cni_cncf.Macvlan:
    derived_from: tosca.datatatypes.iolab.k8s.cni_cncf.Plugin
    description: >-
      macvlan functions like a switch that is already connected to the host interface.
      A host interface gets “enslaved” with the virtual interfaces sharing the physical device but having distinct MAC addresses.
      Since each macvlan interface has its own MAC address, it makes it easy to use with existing DHCP servers already present on the network.
    properties:           
      master:
        description: >-
          name of the host interface to enslave. Defaults to default route interface.
        type: string
        required: false
      mode:
        type: string
        constraints:
          - valid_values: [ bridge, private, vepa, passthru ]
        default: bridge
        required: false
      mtu:
        description: >-
          Explicitly set MTU to the specified value. Defaults to the value chosen by the kernel.
          The value must be [0, master’s MTU].
        type: integer
        required: false      
      ipam:
        description: >-
          IPAM configuration to be used for this network. For interface only without ip address, create empty dictionary.
        type: map
        required: true
        default: { }

  tosca.datatatypes.iolab.k8s.cni_cncf.Ptp:
    derived_from: tosca.datatatypes.iolab.k8s.cni_cncf.Plugin
    description: >-
      The ptp plugin creates a point-to-point link between a container and the host by using a veth device.
      One end of the veth pair is placed inside a container and the other end resides on the host.
      The host-local IPAM plugin can be used to allocate an IP address to the container.
      The traffic of the container interface will be routed through the interface of the host.
    properties:
      ipMasq:
        description: >-
          Set up IP Masquerade on the host for traffic originating from ip of this network and destined outside of this network.
        type: boolean
        default: false
        required: false
      mtu:
        description: >-
          Explicitly set MTU to the specified value. Defaults to the value chosen by the kernel.
        type: integer
        required: false
      ipam:
        description: >-
          IPAM configuration to be used for this network.
          Default to value chosen by the kernel.
        type: map
        required: true
        default: { }
      dns:
        description: >-
        type: tosca.datatatypes.iolab.k8s.cni_cncf.DnsInfo
        
  tosca.datatatypes.iolab.k8s.cni_cncf.DnsInfo:
    derived_from: tosca.datatypes.Root
    description: >-
      DNS Information as defined by CNI.
    properties:        
       nameservers:
         description: >-
           List of a priority-ordered list of DNS nameservers that this network is aware of.
           Each entry in the list is a string containing either an IPv4 or an IPv6 address.
         type: list
         entry_schema:
           type: string
         required: false
       domain: 
         description: >-
           The local domain used for short hostname lookups.
         type: string
         required: false
       search:
         description: >-
           List of priority ordered search domains for short hostname lookups.
           Will be preferred over domain by most resolvers.
         type: list
         entry_schema:
           type: string
         required: false
       options:
         description: >-
           List of options that can be passed to the resolver.
         type: list
         entry_schema:
           type: string
         required: false

node_types:

  tosca.nodes.iolab.k8s.cni_cncf.NetworkAttachment:
    derived_from: tosca.nodes.Root
    description: >-
      This Node type corresponds to the NetworkAttachmentDefinition Custom Resource object as specified by the K8S Network plumbing WG.
      It describes how to attach a pod to the logical or physical network referenced by the object. 
    version: v1
    properties:
      metaProperties:
        description: >-
          The Kubernetes states that can be specified by users in the corresponding object metadata.
          The CNI "de-facto specification" defines this property as tequired. As a consequence the sub-properties 'name' and 'namespace' are required.
        type: tosca.datatypes.iolab.k8s.ObjectMetaProperties
        required: true 
      config:
        description: >-
          This property defines the plugin chain to execute. 
          The CNI configuration may omit the 'name' field which will be populated by the implementation when the Config is passed to CNI delegate plugins.
        type:  tosca.datatatypes.iolab.k8s.cni_cncf.NetworkAttachmentConfig

        
          
