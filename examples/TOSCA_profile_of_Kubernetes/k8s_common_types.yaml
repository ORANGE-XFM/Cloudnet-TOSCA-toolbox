###############################################################################
# Software Name : Cloudnet TOSCA toolbox
# Version: 1.0
# SPDX-FileCopyrightText: Copyright (c) 2021 Orange
# SPDX-License-Identifier: Apache-2.0
#
# This software is distributed under the Apache License 2.0
# the text of which is available at http://www.apache.org/licenses/LICENSE-2.0
# or see the "LICENSE-2.0.txt" file for more details.
#
# Authors:
#   Frédéric Klamm <frederic.klamm@orange.com>
#
# Software description: TOSCA profile of K8S
###############################################################################

tosca_definitions_version: tosca_simple_yaml_1_3

description: Kubernetes 1.22 common types definitions

metadata:
  template_name: k8s_common_types
  template_author: fk
  template_version: 0.9


# No type in this profile is derived from an OASIS TOSCA profile type (§5) or from an ETSI NFV profile type.
# A lot of property constraints have been formalized in TOSCA based on their description in English in K8S JSON schema description fields.


data_types:

  # Appears in NodeConfigSource only (which one depends on K8S config: DynamicKubeletConfig feature gate must be enabled)
  tosca.datatypes.iolab.k8s.ConfigMapNodeConfigSource:
    derived_from: tosca.datatypes.Root
    description: ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.
    properties:
      kubeletConfigKey:
        description: KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
        type: string
        required: true
      name:
        description: Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
        type: string
        required: true
      namespace:
        description: Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
        type: string
        # informally required (cf. k8s API conventions)
        required: true
      #> Not a desired state, see description. Could be modelled as another datatype (used as attribute)
      #> resourceVersion:
      #>  description: ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
      #>  type: string
      #>uid:
      #>  description: UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
      #>  type: string

  tosca.datatypes.iolab.k8s.CustomResourceColumnDefinition:
    derived_from: tosca.datatypes.Root
    description: >-
      CustomResourceColumnDefinition specifies a column for server side printing.
    properties:
      description:
        description: >-
          description is a human readable description of this column.
        type: string
        required: false
      format:
        description: >-
          format is an optional OpenAPI type definition for this column.
          The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name.
        type: string
        required: false
      jsonPath:
        description: >-
          jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
        type: string
        required: true
      name:
        description: >-
          name is a human readable name for the column.
        type: string
        required: true
      priority:
        description: >-
          priority is an integer defining the relative importance of this column compared to others.
          Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
        type: integer   # format is int32
        required: false
      type:
        description: >-
          type is an OpenAPI type definition for this column.
        type: string
        required: true

  tosca.datatypes.iolab.k8s.CustomResourceDefinitionCondition:
    description: >-
      CustomResourceDefinitionCondition contains details for the current condition of this pod.
    properties:
      lastTransitionTime:
        description: >-
          lastTransitionTime last time the condition transitioned from one status to another.
        type: tosca.datatypes.iolab.k8s.Time
        required: false
      message:
        description: >-
          message is a human-readable message indicating details about last transition.
        type: string
        required: false
      reason:
        description: >-
          reason is a unique, one-word, CamelCase reason for the condition's last transition.
        type: string
        required: false
      status:
        description: status is the status of the condition. Can be True, False, Unknown.
        type: string
        required: true
      type:
        description: type is the type of the condition. Types include Established, NamesAccepted and Terminating.
        type: string
        required: true

  tosca.datatypes.iolab.k8s.CustomResourceConversion:
    derived_from: tosca.datatypes.Root
    description: >-
      CustomResourceConversion describes how to convert different versions of a CR.
    properties:
      conversionReviewVersions:
        description: >-
          conversionReviewVersions is an ordered list of preferred `ConversionReview` versions the Webhook expects.
          The API server will use the first version in the list which it supports.
          If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource.
          If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail. 
          Defaults to `["v1beta1"]`.
        type: list
        entry_schema:
          type: string
        required: false
        default: [ v1beta1 ]
      # ! bound to preserveUnknownFields and conversion.webhookClientConfig
      strategy:
        description: >-
          strategy specifies how custom resources are converted between versions. Allowed values are: 
          - `None`: The converter only change the apiVersion and would not touch any other field in the custom resource.
          - `Webhook`: API Server will call to an external webhook to do the conversion.
          Additional information is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhookClientConfig to be set.
        type: string
        constraints:
          - valid_values: [ None, Webhook ]
        required: true
      webhookClientConfig:
        description: >-
          webhookClientConfig is the instructions for how to call the webhook if strategy is `Webhook`. Required when `strategy` is set to `Webhook`.
        type: tosca.datatypes.iolab.k8s.WebhookClientConfig
        required: false

  tosca.datatypes.iolab.k8s.CustomResourceDefinitionNames:
    derived_from: tosca.datatypes.Root
    description: >-
      CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition.
    properties:
      categories:
        description: >-
          categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). 
          This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
        type: list
        entry_schema:
          type: string
        required: false
      kind:
        description: >-
          kind is the serialized kind of the resource. It is normally CamelCase and singular. 
          Custom resource instances will use this value as the `kind` attribute in API calls.
        type: string
        required: true
      listKind:
        description: >-
          listKind is the serialized kind of the list for this resource. Defaults to `kind`List.
        type: string
        required: false
      plural:
        description: >-
          plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. 
          Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
        type: string
        # a pattern could be added
        required: true
      shortNames:
        description: >-
          shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`.
          It must be all lowercase.
        type: list
        entry_schema: 
          type: string
        required: false
      singular:
        description: >-
          singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
        type: string
        required: false

  tosca.datatypes.iolab.k8s.CustomResourceDefinitionVersion:
    derived_from: tosca.datatypes.Root
    description: >-
      CustomResourceDefinitionVersion describes a version for CRD.
    properties:
      additionalPrinterColumns:
        description: >-
          additionalPrinterColumns specifies additional columns returned in Table output.
          If no columns are specified, a single column displaying the age of the custom resource is used.
        type: list
        entry_schema:
          type: tosca.datatypes.iolab.k8s.CustomResourceColumnDefinition
        required: false
      deprecated:
        description: >-
          deprecated indicates this version of the custom resource API is deprecated. 
          When set to true, API requests to this version receive a warning header in the server response. Defaults to false.
        type: boolean
        default: false
        required: false
      #! bound to 'deprecated'
      deprecationWarning:
        description: >-
          deprecationWarning overrides the default warning returned to API clients. May only be set when `deprecated` is true. 
          The default warning indicates this version is deprecated and recommends use of the newest served version of equal or greater stability, if one exists.
        type: string
        required: false
      #! bound to 'served'
      name:
        description: >-
          name is the version name, e.g. “v1”, “v2beta1”, etc. The custom resources are served under this version at `/apis/<group>/<version>/...` if `served` is true.
        type: string
        required: true
      schema:
        description: >-
          schema describes the schema used for validation, pruning, and defaulting of this version of the custom resource.
        type: tosca.datatypes.iolab.k8s.CustomResourceValidation
        required: false
      served:
        description: >-
          served is a flag enabling/disabling this version from being served via REST APIs.
        type: boolean
        required: true
      storage:
        description: >-
          storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true.
        type: boolean
        required: true
      subresources:
        description: subresources specify what subresources this version of the defined custom resource have.
        type: tosca.datatypes.iolab.k8s.CustomResourceSubresources
        required: false

  # undeveloped
  tosca.datatypes.iolab.k8s.CustomResourceSubresources:
    derived_from: tosca.datatypes.Root
    description: >-
      CustomResourceSubresources defines the status and scale subresources for CustomResources.

  tosca.datatypes.iolab.k8s.CustomResourceValidation:
    derived_from: tosca.datatypes.Root
    description: >-
      CustomResourceValidation is a list of validation methods for CustomResources.
    properties:
      openAPIV3Schema:
        description: openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
        type: tosca.datatypes.iolab.k8s.JSONSchemaProps
        required: false

  # Appears in PersistentVolume only
  tosca.datatypes.iolab.k8s.HostPathVolumeSource:
    description: Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
    properties:
      path:
        description: Path of the directory on the host. If the path is a symlink, it will follow the link to the real path.
        type: string
        required: true
      type:
        description: Type for HostPath Volume Defaults to ""
        type: string
        required: false

  # undeveloped
  tosca.datatypes.iolab.k8s.JSONSchemaProps:
    derived_from: tosca.datatypes.Root
    description: >-
      JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).

 # Appears in ObjectMeta.managedFields only, which looks useless in NFV context
  tosca.datatypes.iolab.k8s.ManagedFieldsEntry:
    derived_from: tosca.datatypes.Root

  tosca.datatypes.iolab.k8s.ObjectMetaAttributes:
    #> The following description doesn't come from K8s
    description: >-
      This datatype captures Kubernetes ObjectMeta data that are populated by the system. ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
    properties:
      #! bound to request of graceful deletion (cf. description)
      deletionTimestamp:
        description: >-
          DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, 
          and is not directly settable by a client. The resource is expected to be deleted after the time in this field, once the finalizers list is empty. 
          As long as the finalizers list contains items, deletion is blocked. In the presence of network partitions, this object may still exist after this timestamp, 
          until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
          Populated by the system when a graceful deletion is requested. Read-only.
        type: string    #>  k8s format is "date-time"
      # NFV: generateName would never be used (cf. namespace) 
      generateName:
        description: >-
          GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client
          will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated
          by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - 
          instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, 
          and the client should retry (optionally after the time indicated in the Retry-After header).Applied only if Name is not specified.
        type: string
      generation:
        description: >-
          A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
        type: integer
      managedFields:
        description: >-
          ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, 
          and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd".
          The set of fields is always in the version that the workflow used when modifying the object.
        type: list
        entry_schema:
          type: tosca.datatypes.iolab.k8s.ManagedFieldsEntry
      ownerReferences:
        description: >-
          List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, 
          then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
        type: list
        entry_schema:
          type: tosca.datatypes.iolab.k8s.OwnerReference
      resourceVersion:
        description: >-
          An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, 
          change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.Populated by the system. Read-only.
        type: string
      selfLink:
        description: >-
          SelfLink is a URL representing this object. Populated by the system. Read-only.
          DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
        type: string
      uid:
        description: >-
          UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
          Populated by the system. Read-only.
        type: string


    # The following root type captures the Kubernetes ObjectMeta type, which may apply to any type of TOSCA entity
  tosca.datatypes.iolab.k8s.ObjectMetaProperties:
    # The following description doesn't come from K8s
    description: >-
      This datatype captures Kubernetes ObjectMeta data that may represent desired states. 
      ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
    properties:
      annotations:
        description: >-
          Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata.
          They are not queryable and should be preserved when modifying objects.
        type: map
        entry_schema:
          type: string
        required: false
      clusterName:
        description: >-
          The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. 
          This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
        type: string
        required: false
      creationTimestamp:
        description: >-
          CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations.
          Clients may not set this value. It is represented in RFC3339 form and is in UTC.
          Populated by the system. Read-only. Null for lists.
        type: string # TOSCA requires that a timestamp be inclosed in quotation marks.     #  k8s format is "date-time"
        required: false
      deletionGracePeriodSeconds:
        description: >-
          Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. 
          Only set when deletionTimestamp is also set. May only be shortened. Read-only.
        type: integer
        required: false
      finalizers:
        description: >-
          Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list.
          If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order. 
          Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it.
          If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal
          (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. 
          Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
        type: list
        entry_schema:
          type: string
        required: false
      labels:
        description: >-
          Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services.
        type: map
        entry_schema:
          type: string
        required: false
        
      # NFV: name is mandatory in NFV, at least of MCIOs, i.e. for any pod controller manifest
      name:
        description: >-
          Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically.
          Name is primarily intended for creation idempotence and configuration definition. Cannot be updated.
        type: string
        required: true
      # The k8s doc says the Kubernetes control plane sets an immutable label kubernetes.io/metadata.name on all namespaces, provided that the NamespaceDefaultLabelName feature gate is enabled. 
      # The value of the label is the namespace name.
      # NFV: I suggest to make the corresponding property mandatory in MANO. 
      # NFV: First, even if all K8S instances were configured to generate namespace based on the metadata.name field, some might provide a name for each VNFC, implying a namespace by VNFC.
      # NFV: Second, in the absence of a value for metadata.name, the value is automatically assigned...
      # NFV: Also, the namespace value might be set to 'default', which may lead to a security issue.
      namespace:
        description: >-
          Namespace defines the space within each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.Must be a DNS_LABEL. Cannot be updated.
        type: string
        required: true

  # Appears in various objects
  tosca.datatypes.iolab.k8s.ObjectReference:
    description: ObjectReference contains enough information to let you inspect or modify the referred object.
    properties:
      apiVersion:
        description: API version of the referent.
        type: string
        required: true
      fieldPath:
        description: >-
          If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].
          For example, if the object reference is to a container within a pod, this would take on a value like "spec.containers{name}"
          (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod).
          This syntax is chosen only to have some well-defined way of referencing a part of an object.
        type: string
        required: false
      kind:
        description: Kind of the referent.
        type: string
        required: false
      name:
        description: Name of the referent.
        type: string
        required: false
      namespace:
        description: Namespace of the referent.
        type: string
        required: false
      resourceVersion:
        description: Specific resourceVersion to which this reference is made, if any.
        type: string
        required: false
      uid:
        description: UID of the referent.
        type: string
        required: false

  #> Appears only in an attribute (in tosca acception) of ObjectMeta
  tosca.datatypes.iolab.k8s.OwnerReference:
    derived_from: tosca.datatypes.Root
    description: >-
      OwnerReference contains enough information to let you identify an owning object. 
      An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
    properties:
      apiVersion:
        description: API version of the referent.
        type: string
        required: true
      blockOwnerDeletion:
        description: >-
          If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed.
          Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
        type: boolean
        default: false
        required: false
      controller:
        description: If true, this reference points to the managing controller.
        type: boolean
        required: false
      kind:
        description: Kind of the referent.
        type: string
        required: true
      name:
        description: Name of the referent. 
        type: string
        required: true
      uid:
        description: UID of the referent.
        type: string
        required: true


#>! K8S JSON schema defines the Quantity type as oneOf [string, number]
  tosca.datatypes.iolab.k8s.Quantity:
    derived_from: string

# K8S description: Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON. Wrappers are provided for many of the factory methods that the time package offers.
  tosca.datatypes.iolab.k8s.Time:
    derived_from: string

  tosca.datatypes.iolab.k8s.LabelSelector:
    derived_from: tosca.datatypes.Root
    description: >-
      A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed.
      An empty label selector matches all objects. A null label selector matches no objects.
    properties:
      matchExpressions:
        description: >-
          matchExpressions is a list of label selector requirements. The requirements are ANDed.
        type: list
        entry_schema:
          type: tosca.datatypes.iolab.k8s.LabelSelectorRequirement
        required: false
      matchLabels:
        description: >-
          matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, 
          whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        type: map
        entry_schema:
          type: string
        required: false

  tosca.datatypes.iolab.k8s.LabelSelectorRequirement:
    description: >-
      A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    properties:
      key:
        description: >-
          key is the label key that the selector applies to.
        type: string
        required: true
      operator:
        description: >-
          operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        type: string
        constraints:
          - valid_values: [ In, NotIn, Exists, DoesNotExist ]
        required: true
      #> Emptiness is bound to the value assigned to 'operator'
      values:
        description: >-
          values is an array of string values.
          If the operator is In or NotIn, the values array must be non-empty.
          If the operator is Exists or DoesNotExist, the values array must be empty.
          This array is replaced during a strategic merge patch.
        type: list
        entry_schema:
          type: string
        required: false

  tosca.datatypes.iolab.k8s.NodeSelector:
    derived_from: tosca.datatypes.Root
    #> OR (cf.description)
    description: >-
      A node selector represents the union of the results of one or more label queries over a set of nodes;
      that is, it represents the OR of the selectors represented by the node selector terms.
    properties:
      nodeSelectorTerms:
        description: Required. A list of node selector terms. The terms are ORed.
        type: list
        entry_schema:
          type: tosca.datatypes.iolab.k8s.NodeSelectorTerm
        required: true

  tosca.datatypes.iolab.k8s.NodeSelectorRequirement:
    derived_from: tosca.datatypes.Root
    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    properties:
      key:
        description: The label key that the selector applies to.
        type: string
        required: true
      operator:
        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        type: string
        constraints:
          - valid_values: [ In, NotIn, Exists, DoesNotExist, Gt, Lt ]
        required: true
      values:
      #> Whether it is empty, singleton or other is bound to the value assigned to 'operator'
        description: >-
          An array of string values. If the operator is In or NotIn, the values array must be non-empty.
          If the operator is Exists or DoesNotExist, the values array must be empty.
          If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer.
          This array is replaced during a strategic merge patch.
        type: list
        entry_schema:
          type: string
        required: false

  tosca.datatypes.iolab.k8s.NodeSelectorTerm:
    derived_from: tosca.datatypes.Root
    properties:
      matchExpressions:
        description: >-
          A list of node selector requirements by node's labels.
        type: list
        entry_schema:
          type: tosca.datatypes.iolab.k8s.NodeSelectorRequirement
        required: true
      matchFields:
        description: >-
          A list of node selector requirements by node's fields.
        type: list
        entry_schema:
          type: tosca.datatypes.iolab.k8s.NodeSelectorRequirement
        required: true

  tosca.datatypes.iolab.k8s.ServiceReference:
    description: ServiceReference holds a reference to Service.legacy.k8s.io
    properties:
      name:
        description: >-
          name is the name of the service.
        type: string
        required: true
      namespace:
        description: >-
          namespace is the namespace of the service.
        type: string
        required: true
      path:
        description: >-
          path is an optional URL path at which the webhook will be contacted.
        type: string
        required: true
      port:
        description: >-
          port is an optional service port at which the webhook will be contacted. `port` should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.
        type: integer   # format is int32
        constraints:
          - in_range: [ 1, 65535 ]
        default: 443
        required: false

  #> Appears in several objects
  tosca.datatypes.iolab.k8s.TypedLocalObjectReference:
    derived_from: tosca.datatypes.Root
    description: TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
    properties:
      apiGroup:
        description: >-
          APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group.
          For any other third-party types, APIGroup is required.
        type: string
      kind:
        description: Kind is the type of resource being referenced
        type: string
        required: true
      name:
        description: Name is the name of resource being referenced
        type: string
        required: true

  tosca.datatypes.iolab.k8s.WebhookClientConfig:
    description: >-
      WebhookClientConfig contains the information to make a TLS connection with the webhook.
    properties:
      caBundle:
        description: >-
          `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
        type: string    # format is byte
        required: false  
      #! bound to url  
      service:
        description: >-
          `service` is a reference to the service for this webhook. Either `service` or `url` must be specified.
          If the webhook is running within the cluster, then you should use `service`.
        type: tosca.datatypes.iolab.k8s.ServiceReference
        required: false
      url:
         description: >-
           `url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
           The `host` should not refer to a service running in the cluster; use the `service` field instead. 
           The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation).
           `host` may also be an IP address. Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on 
           all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
           The scheme must be "https"; the URL must begin with "https://". A path is optional, and if present may be any string permissible in a URL. 
           You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.Attempting to use a user or basic auth e.g. "user:password@" is not allowed.
           Fragments ("#...") and query parameters ("?...") are not allowed, either.
         type: string
         required: false
        
node_types:

  tosca.nodes.iolab.k8s.CustomResourceDefinition:
    derived_from: tosca.nodes.Root
    description: >-
      CustomResourceDefinition represents a resource that should be exposed on the API server. 
      Its name MUST be in the format <.spec.name>.<.spec.group>. Its properties describe how a user wants their resource to appear.
    properties:   # matches DeploymentSpec, the specification of the desired behavior of the Deployment.
      metaProperties:
        description: >-
          The Kubernetes states that can be specified by users in the corresponding object metadata.
        type: tosca.datatypes.iolab.k8s.ObjectMetaProperties
        required: false
#    "x-kubernetes-group-version-kind": [ { "group": "apiextensions.k8s.io", "kind": "CustomResourceDefinition", "version": "v1" }  ]
      conversion:
        description: >-
          conversion defines conversion settings for the CRD.
        type: tosca.datatypes.iolab.k8s.CustomResourceConversion
        required: false
      group:
        description: >-
          group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`.
          Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).",
        type: string
        required: true
      names:
        description: >-
          names specify the resource and kind names for the custom resource.
        type: tosca.datatypes.iolab.k8s.CustomResourceDefinitionNames
        required: true
      preserveUnknownFields:
        description: >-
          preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. 
          apiVersion, kind, metadata and known fields inside metadata are always preserved.
          This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`.
        type: boolean
        required: false
      scope:
        description: >-
          scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.
        type: string
        constraints:
          - valid_values: [ Cluster, Namespaced ]
        default: Namespaced   # NFV case (and more generally multiple application providers sharing the cluster)
        required: true
      versions:
        description: >-
          versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery.
          If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically.
          "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version).
          These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version.
          An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
        type: list
        entry_schema:
          type: tosca.datatypes.iolab.k8s.CustomResourceDefinitionVersion
        required: true
    attributes:
      metaAttributes:
        description: >-
          The Kubernetes states that is populated by the system in the corresponding object metadata.
        type: tosca.datatypes.iolab.k8s.ObjectMetaAttributes
      acceptedNames:
        description: >-
          acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec.
        type: tosca.datatypes.iolab.k8s.CustomResourceDefinitionNames
      conditions:
        description: >-
          conditions indicate state for particular aspects of a CustomResourceDefinition",
        type: list
        entry_schema:
          type: tosca.datatypes.iolab.k8s.CustomResourceDefinitionCondition
#     "x-kubernetes-list-map-keys"....
#      ... "x-kubernetes-list-type": "map"
      storedVersions:
        description: >-
          'storedVersions' lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd.
          The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage),
          and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.
        type: list
        entry_schema:
          type: string


artifact_types:

  tosca.artifacts.iolab.k8s.LocalObjectReference:
    derived_from: tosca.artifacts.Root
    description: LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    properties:
      name:
        description: Name of the referent.
        type: string
        

